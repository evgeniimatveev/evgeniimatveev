name: Auto Update README

on:
  schedule:
    - cron: "5 */6 * * *" # Run every 6 hours      # Run every hour  "0 */1 * * *"
  workflow_dispatch:          # Allow manual runs from the Actions tab

# Prevent concurrent runs of this workflow from racing on README changes
concurrency:
  group: auto-update-readme
  cancel-in-progress: false

jobs:
  update-readme:
    runs-on: ubuntu-latest
    env:
      # Optional: if your Python script supports it, you can read this to switch modes
      BANNER_MODE: sequential

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false   # We'll push with PAT explicitly
          fetch-depth: 0               # Needed so Git has history for commits

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

  

      - name: Run updater (updates banner + timestamp + quote)
        run: python update_readme.py

      - name: Configure Git author
        run: |
          git config --global user.name "evgeniimatveev"
          git config --global user.email "your-email@users.noreply.github.com"

      - name: Append run metadata to log
        run: |
          {
            echo "--------------------------------------"
            echo "Updated on: $(date -u) (UTC)"
            echo "Triggered by: ${{ github.event_name }}"
            echo "Commit SHA: ${{ github.sha }}"
            echo "Run ID: ${{ github.run_id }}"
            echo "Run number: ${{ github.run_number }}"
            echo "--------------------------------------"
          } >> update_log.txt

      - name: Trim log (keep last ~70 lines)
        run: |
          tail -n 70 update_log.txt > temp_log.txt || true
          mv temp_log.txt update_log.txt || true

      - name: Update STATUS line in README
  shell: bash
  env:
    # keep this in sync with your `on.schedule.cron` above (GitHub doesn't expose it at runtime)
    CRON_EXPR: "5 */6 * * *"
  run: |
    set -euo pipefail

    # -------- cron -> human label --------
    cron_to_label () {
      # Supports common patterns:
      # 1) "*/N * * * *"              -> every N minutes         => "Nm"
      # 2) "M * * * *"                -> every 1 hour at M min   => "1h_Mm"
      # 3) "M */H * * *"              -> every H hours at M min  => "Hh_Mm"
      # 4) "M H * * *" (numbers)      -> daily at H:M            => "24h_Hh_Mm"
      # Fallback: "custom"
      local expr="$1"
      # split
      local m h d mo w
      read -r m h d mo w <<<"$expr"

      shopt -s extglob

      if [[ "$m" == "*/"+([0-9]) && "$h" == "*" ]]; then
        # every N minutes
        local N=${m#*/}
        echo "${N}m"; return
      fi

      if [[ "$m" =~ ^[0-9]+$ && "$h" == "*" ]]; then
        # every hour at minute M
        printf "1h_%dm" "$m"; return
      fi

      if [[ "$m" =~ ^[0-9]+$ && "$h" == "*/"+([0-9]) ]]; then
        # every H hours at minute M
        local H=${h#*/}
        printf "%dh_%dm" "$H" "$m"; return
      fi

      if [[ "$m" =~ ^[0-9]+$ && "$h" =~ ^[0-9]+$ ]]; then
        # daily at H:M
        printf "24h_%02dh_%02dm" "$h" "$m"; return
      fi

      echo "custom"
    }

    SCHEDULE_LABEL="$(cron_to_label "${CRON_EXPR}")"

    # -------- badges config (uniform style & colors) --------
    STYLE="flat-square"
    LABEL_COLOR="#1F2328"   # good contrast in GitHub Dark
    LOGO_COLOR="white"
    CACHE_SECONDS=300

    short_sha="${GITHUB_SHA:0:7}"
    label_hex="${LABEL_COLOR#\#}"

    run_url="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
    commit_url="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
    events_url="https://github.com/${GITHUB_REPOSITORY}/actions"

    badge_sched="https://img.shields.io/badge/Schedule-${SCHEDULE_LABEL}-2ea44f?style=${STYLE}&labelColor=${label_hex}&logo=clockify&logoColor=${LOGO_COLOR}&cacheSeconds=${CACHE_SECONDS}"
    badge_rot="https://img.shields.io/badge/Rotation-%23${GITHUB_RUN_NUMBER}-1f6feb?style=${STYLE}&labelColor=${label_hex}&logo=replit&logoColor=${LOGO_COLOR}&cacheSeconds=${CACHE_SECONDS}"
    badge_commit="https://img.shields.io/badge/Commit-${short_sha}-9cf?style=${STYLE}&labelColor=${label_hex}&logo=git&logoColor=${LOGO_COLOR}&cacheSeconds=${CACHE_SECONDS}"
    badge_event="https://img.shields.io/badge/Event-${GITHUB_EVENT_NAME}-8a2be2?style=${STYLE}&labelColor=${label_hex}&logo=githubactions&logoColor=${LOGO_COLOR}&cacheSeconds=${CACHE_SECONDS}"

    STATUS=$(
      cat <<HTML
<p align="center">
  <a href="${run_url}"><img alt="Schedule: ${SCHEDULE_LABEL}" src="${badge_sched}" /></a>
  <a href="${run_url}"><img alt="Rotation: #${GITHUB_RUN_NUMBER}" src="${badge_rot}" /></a>
  <a href="${commit_url}"><img alt="Commit: ${short_sha}" src="${badge_commit}" /></a>
  <a href="${events_url}"><img alt="Event: ${GITHUB_EVENT_NAME}" src="${badge_event}" /></a>
</p>
HTML
    )

    # inject between markers
    awk -v R="${STATUS}" '
      /<!-- STATUS:START -->/ {print; print R; skip=1; next}
      /<!-- STATUS:END -->/   {skip=0}
      !skip
    ' README.md > README.tmp && mv README.tmp README.md
     
      - name: Commit & push changes
        env:
          GITHUB_TOKEN: ${{ secrets.CLASSIC_PAT }}   # Personal access token with 'repo' scope
        run: |
          git add README.md update_log.txt || true
          git commit -m "Auto-update README (sequential rotation)" || echo "No changes to commit"
          git push "https://x-access-token:${{ secrets.CLASSIC_PAT }}@github.com/${{ github.repository }}.git" HEAD:main
